// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	provision "github.com/absmach/magistrala/provision"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Cert provides a mock function with given fields: domainID, token, clientID, duration
func (_m *Service) Cert(domainID string, token string, clientID string, duration string) (string, string, error) {
	ret := _m.Called(domainID, token, clientID, duration)

	if len(ret) == 0 {
		panic("no return value specified for Cert")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (string, string, error)); ok {
		return rf(domainID, token, clientID, duration)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(domainID, token, clientID, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) string); ok {
		r1 = rf(domainID, token, clientID, duration)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, string) error); ok {
		r2 = rf(domainID, token, clientID, duration)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mapping provides a mock function with given fields: token
func (_m *Service) Mapping(token string) (map[string]interface{}, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Mapping")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provision provides a mock function with given fields: domainID, token, name, externalID, externalKey
func (_m *Service) Provision(domainID string, token string, name string, externalID string, externalKey string) (provision.Result, error) {
	ret := _m.Called(domainID, token, name, externalID, externalKey)

	if len(ret) == 0 {
		panic("no return value specified for Provision")
	}

	var r0 provision.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (provision.Result, error)); ok {
		return rf(domainID, token, name, externalID, externalKey)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) provision.Result); ok {
		r0 = rf(domainID, token, name, externalID, externalKey)
	} else {
		r0 = ret.Get(0).(provision.Result)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(domainID, token, name, externalID, externalKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
