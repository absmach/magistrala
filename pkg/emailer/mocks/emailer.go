// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewEmailer creates a new instance of Emailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Emailer {
	mock := &Emailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Emailer is an autogenerated mock type for the Emailer type
type Emailer struct {
	mock.Mock
}

type Emailer_Expecter struct {
	mock *mock.Mock
}

func (_m *Emailer) EXPECT() *Emailer_Expecter {
	return &Emailer_Expecter{mock: &_m.Mock}
}

// SendEmailNotification provides a mock function for the type Emailer
func (_mock *Emailer) SendEmailNotification(to []string, from string, subject string, header string, user string, content string, footer string, attachments map[string][]byte) error {
	ret := _mock.Called(to, from, subject, header, user, content, footer, attachments)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]string, string, string, string, string, string, string, map[string][]byte) error); ok {
		r0 = returnFunc(to, from, subject, header, user, content, footer, attachments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Emailer_SendEmailNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailNotification'
type Emailer_SendEmailNotification_Call struct {
	*mock.Call
}

// SendEmailNotification is a helper method to define mock.On call
//   - to []string
//   - from string
//   - subject string
//   - header string
//   - user string
//   - content string
//   - footer string
//   - attachments map[string][]byte
func (_e *Emailer_Expecter) SendEmailNotification(to interface{}, from interface{}, subject interface{}, header interface{}, user interface{}, content interface{}, footer interface{}, attachments interface{}) *Emailer_SendEmailNotification_Call {
	return &Emailer_SendEmailNotification_Call{Call: _e.mock.On("SendEmailNotification", to, from, subject, header, user, content, footer, attachments)}
}

func (_c *Emailer_SendEmailNotification_Call) Run(run func(to []string, from string, subject string, header string, user string, content string, footer string, attachments map[string][]byte)) *Emailer_SendEmailNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		var arg7 map[string][]byte
		if args[7] != nil {
			arg7 = args[7].(map[string][]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
			arg7,
		)
	})
	return _c
}

func (_c *Emailer_SendEmailNotification_Call) Return(err error) *Emailer_SendEmailNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Emailer_SendEmailNotification_Call) RunAndReturn(run func(to []string, from string, subject string, header string, user string, content string, footer string, attachments map[string][]byte) error) *Emailer_SendEmailNotification_Call {
	_c.Call.Return(run)
	return _c
}
