// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package bootstrap

import (
	"github.com/absmach/magistrala/bootstrap"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConfigReader creates a new instance of MockConfigReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigReader {
	mock := &MockConfigReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigReader is an autogenerated mock type for the ConfigReader type
type MockConfigReader struct {
	mock.Mock
}

type MockConfigReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigReader) EXPECT() *MockConfigReader_Expecter {
	return &MockConfigReader_Expecter{mock: &_m.Mock}
}

// ReadConfig provides a mock function for the type MockConfigReader
func (_mock *MockConfigReader) ReadConfig(config bootstrap.Config, b bool) (interface{}, error) {
	ret := _mock.Called(config, b)

	if len(ret) == 0 {
		panic("no return value specified for ReadConfig")
	}

	var r0 interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(bootstrap.Config, bool) (interface{}, error)); ok {
		return returnFunc(config, b)
	}
	if returnFunc, ok := ret.Get(0).(func(bootstrap.Config, bool) interface{}); ok {
		r0 = returnFunc(config, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(bootstrap.Config, bool) error); ok {
		r1 = returnFunc(config, b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigReader_ReadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadConfig'
type MockConfigReader_ReadConfig_Call struct {
	*mock.Call
}

// ReadConfig is a helper method to define mock.On call
//   - config
//   - b
func (_e *MockConfigReader_Expecter) ReadConfig(config interface{}, b interface{}) *MockConfigReader_ReadConfig_Call {
	return &MockConfigReader_ReadConfig_Call{Call: _e.mock.On("ReadConfig", config, b)}
}

func (_c *MockConfigReader_ReadConfig_Call) Run(run func(config bootstrap.Config, b bool)) *MockConfigReader_ReadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bootstrap.Config), args[1].(bool))
	})
	return _c
}

func (_c *MockConfigReader_ReadConfig_Call) Return(ifaceVal interface{}, err error) *MockConfigReader_ReadConfig_Call {
	_c.Call.Return(ifaceVal, err)
	return _c
}

func (_c *MockConfigReader_ReadConfig_Call) RunAndReturn(run func(config bootstrap.Config, b bool) (interface{}, error)) *MockConfigReader_ReadConfig_Call {
	_c.Call.Return(run)
	return _c
}
