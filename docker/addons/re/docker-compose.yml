# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

# This docker-compose file contains optional Rule Egine service for Magistrala platform.
# Since these are optional, this file is dependent of docker-compose file
# from <project_root>/docker. In order to run these services, execute command:
# docker compose -f docker/docker-compose.yml -f docker/addons/re/docker-compose.yml up
# from project root. PostgreSQL port is mapped, so you can use various tools for database
# inspection and data visualization.

networks:
  magistrala-base-net:
    driver: bridge

volumes:
  magistrala-re-db-volume:

services:
  re-db:
    image: postgres:16.2-alpine
    container_name: magistrala-re-db
    restart: on-failure
    command: postgres -c "max_connections=${SMQ_POSTGRES_MAX_CONNECTIONS}"
    environment:
      POSTGRES_USER: ${SMQ_RE_DB_USER}
      POSTGRES_PASSWORD: ${SMQ_RE_DB_PASS}
      POSTGRES_DB: ${SMQ_RE_DB_NAME}
    ports:
      - 6008:5432
    networks:
      - magistrala-base-net
    volumes:
      - magistrala-re-db-volume:/var/lib/postgresql/data

  re:
    image: ghcr.io/absmach/magistrala/re:${SMQ_RELEASE_TAG}
    container_name: magistrala-re
    depends_on:
      - re-db
    restart: on-failure
    environment:
      SMQ_RE_LOG_LEVEL: ${SMQ_RE_LOG_LEVEL}
      SMQ_RE_HTTP_PORT: ${SMQ_RE_HTTP_PORT}
      SMQ_RE_HTTP_HOST: ${SMQ_RE_HTTP_HOST}
      SMQ_RE_HTTP_SERVER_CERT: ${SMQ_RE_HTTP_SERVER_CERT}
      SMQ_RE_HTTP_SERVER_KEY: ${SMQ_RE_HTTP_SERVER_KEY}
      SMQ_RE_DB_HOST: ${SMQ_RE_DB_HOST}
      SMQ_RE_DB_PORT: ${SMQ_RE_DB_PORT}
      SMQ_RE_DB_USER: ${SMQ_RE_DB_USER}
      SMQ_RE_DB_PASS: ${SMQ_RE_DB_PASS}
      SMQ_RE_DB_NAME: ${SMQ_RE_DB_NAME}
      SMQ_RE_DB_SSL_MODE: ${SMQ_RE_DB_SSL_MODE}
      SMQ_RE_DB_SSL_CERT: ${SMQ_RE_DB_SSL_CERT}
      SMQ_RE_DB_SSL_KEY: ${SMQ_RE_DB_SSL_KEY}
      SMQ_RE_DB_SSL_ROOT_CERT: ${SMQ_RE_DB_SSL_ROOT_CERT}
      SMQ_MESSAGE_BROKER_URL: ${SMQ_MESSAGE_BROKER_URL}
      SMQ_JAEGER_URL: ${SMQ_JAEGER_URL}
      SMQ_JAEGER_TRACE_RATIO: ${SMQ_JAEGER_TRACE_RATIO}
      SMQ_SEND_TELEMETRY: ${SMQ_SEND_TELEMETRY}
      SMQ_AUTH_GRPC_URL: ${SMQ_AUTH_GRPC_URL}
      SMQ_AUTH_GRPC_TIMEOUT: ${SMQ_AUTH_GRPC_TIMEOUT}
      SMQ_AUTH_GRPC_CLIENT_CERT: ${SMQ_AUTH_GRPC_CLIENT_CERT:+/auth-grpc-client.crt}
      SMQ_AUTH_GRPC_CLIENT_KEY: ${SMQ_AUTH_GRPC_CLIENT_KEY:+/auth-grpc-client.key}
      SMQ_AUTH_GRPC_SERVER_CA_CERTS: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+/auth-grpc-server-ca.crt}
      SMQ_SPICEDB_PRE_SHARED_KEY: ${SMQ_SPICEDB_PRE_SHARED_KEY}
      SMQ_SPICEDB_HOST: ${SMQ_SPICEDB_HOST}
      SMQ_SPICEDB_PORT: ${SMQ_SPICEDB_PORT}
      SMQ_RE_INSTANCE_ID: ${SMQ_RE_INSTANCE_ID}
    ports:
      - ${SMQ_RE_HTTP_PORT}:${SMQ_RE_HTTP_PORT}
    networks:
      - magistrala-base-net
    volumes:
      # Auth gRPC client certificates
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_CERT:-ssl/certs/dummy/client_cert}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_CERT:+.crt}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_CLIENT_KEY:-ssl/certs/dummy/client_key}
        target: /auth-grpc-client${SMQ_AUTH_GRPC_CLIENT_KEY:+.key}
        bind:
          create_host_path: true
      - type: bind
        source: ${SMQ_AUTH_GRPC_SERVER_CA_CERTS:-ssl/certs/dummy/server_ca}
        target: /auth-grpc-server-ca${SMQ_AUTH_GRPC_SERVER_CA_CERTS:+.crt}
        bind:
          create_host_path: true
      - ./config.toml:/config.toml
