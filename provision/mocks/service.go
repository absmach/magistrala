// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package provision

import (
	"github.com/absmach/magistrala/provision"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Cert provides a mock function for the type MockService
func (_mock *MockService) Cert(domainID string, token string, clientID string, duration string) (string, string, error) {
	ret := _mock.Called(domainID, token, clientID, duration)

	if len(ret) == 0 {
		panic("no return value specified for Cert")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (string, string, error)); ok {
		return returnFunc(domainID, token, clientID, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = returnFunc(domainID, token, clientID, duration)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) string); ok {
		r1 = returnFunc(domainID, token, clientID, duration)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, string, string) error); ok {
		r2 = returnFunc(domainID, token, clientID, duration)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockService_Cert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cert'
type MockService_Cert_Call struct {
	*mock.Call
}

// Cert is a helper method to define mock.On call
//   - domainID
//   - token
//   - clientID
//   - duration
func (_e *MockService_Expecter) Cert(domainID interface{}, token interface{}, clientID interface{}, duration interface{}) *MockService_Cert_Call {
	return &MockService_Cert_Call{Call: _e.mock.On("Cert", domainID, token, clientID, duration)}
}

func (_c *MockService_Cert_Call) Run(run func(domainID string, token string, clientID string, duration string)) *MockService_Cert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockService_Cert_Call) Return(s string, s1 string, err error) *MockService_Cert_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockService_Cert_Call) RunAndReturn(run func(domainID string, token string, clientID string, duration string) (string, string, error)) *MockService_Cert_Call {
	_c.Call.Return(run)
	return _c
}

// Mapping provides a mock function for the type MockService
func (_mock *MockService) Mapping(token string) (map[string]interface{}, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Mapping")
	}

	var r0 map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Mapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mapping'
type MockService_Mapping_Call struct {
	*mock.Call
}

// Mapping is a helper method to define mock.On call
//   - token
func (_e *MockService_Expecter) Mapping(token interface{}) *MockService_Mapping_Call {
	return &MockService_Mapping_Call{Call: _e.mock.On("Mapping", token)}
}

func (_c *MockService_Mapping_Call) Run(run func(token string)) *MockService_Mapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockService_Mapping_Call) Return(stringToIfaceVal map[string]interface{}, err error) *MockService_Mapping_Call {
	_c.Call.Return(stringToIfaceVal, err)
	return _c
}

func (_c *MockService_Mapping_Call) RunAndReturn(run func(token string) (map[string]interface{}, error)) *MockService_Mapping_Call {
	_c.Call.Return(run)
	return _c
}

// Provision provides a mock function for the type MockService
func (_mock *MockService) Provision(domainID string, token string, name string, externalID string, externalKey string) (provision.Result, error) {
	ret := _mock.Called(domainID, token, name, externalID, externalKey)

	if len(ret) == 0 {
		panic("no return value specified for Provision")
	}

	var r0 provision.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) (provision.Result, error)); ok {
		return returnFunc(domainID, token, name, externalID, externalKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, string) provision.Result); ok {
		r0 = returnFunc(domainID, token, name, externalID, externalKey)
	} else {
		r0 = ret.Get(0).(provision.Result)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = returnFunc(domainID, token, name, externalID, externalKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Provision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provision'
type MockService_Provision_Call struct {
	*mock.Call
}

// Provision is a helper method to define mock.On call
//   - domainID
//   - token
//   - name
//   - externalID
//   - externalKey
func (_e *MockService_Expecter) Provision(domainID interface{}, token interface{}, name interface{}, externalID interface{}, externalKey interface{}) *MockService_Provision_Call {
	return &MockService_Provision_Call{Call: _e.mock.On("Provision", domainID, token, name, externalID, externalKey)}
}

func (_c *MockService_Provision_Call) Run(run func(domainID string, token string, name string, externalID string, externalKey string)) *MockService_Provision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockService_Provision_Call) Return(result provision.Result, err error) *MockService_Provision_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockService_Provision_Call) RunAndReturn(run func(domainID string, token string, name string, externalID string, externalKey string) (provision.Result, error)) *MockService_Provision_Call {
	_c.Call.Return(run)
	return _c
}
