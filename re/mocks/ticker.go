// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package re

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTicker creates a new instance of MockTicker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTicker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTicker {
	mock := &MockTicker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTicker is an autogenerated mock type for the Ticker type
type MockTicker struct {
	mock.Mock
}

type MockTicker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTicker) EXPECT() *MockTicker_Expecter {
	return &MockTicker_Expecter{mock: &_m.Mock}
}

// Stop provides a mock function for the type MockTicker
func (_mock *MockTicker) Stop() {
	_mock.Called()
	return
}

// MockTicker_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTicker_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockTicker_Expecter) Stop() *MockTicker_Stop_Call {
	return &MockTicker_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockTicker_Stop_Call) Run(run func()) *MockTicker_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTicker_Stop_Call) Return() *MockTicker_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTicker_Stop_Call) RunAndReturn(run func()) *MockTicker_Stop_Call {
	_c.Run(run)
	return _c
}

// Tick provides a mock function for the type MockTicker
func (_mock *MockTicker) Tick() <-chan time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tick")
	}

	var r0 <-chan time.Time
	if returnFunc, ok := ret.Get(0).(func() <-chan time.Time); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan time.Time)
		}
	}
	return r0
}

// MockTicker_Tick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tick'
type MockTicker_Tick_Call struct {
	*mock.Call
}

// Tick is a helper method to define mock.On call
func (_e *MockTicker_Expecter) Tick() *MockTicker_Tick_Call {
	return &MockTicker_Tick_Call{Call: _e.mock.On("Tick")}
}

func (_c *MockTicker_Tick_Call) Run(run func()) *MockTicker_Tick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTicker_Tick_Call) Return(timeCh <-chan time.Time) *MockTicker_Tick_Call {
	_c.Call.Return(timeCh)
	return _c
}

func (_c *MockTicker_Tick_Call) RunAndReturn(run func() <-chan time.Time) *MockTicker_Tick_Call {
	_c.Call.Return(run)
	return _c
}
