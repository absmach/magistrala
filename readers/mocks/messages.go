// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	readers "github.com/absmach/supermq/readers"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// ReadAll provides a mock function with given fields: chanID, pm
func (_m *MessageRepository) ReadAll(chanID string, pm readers.PageMetadata) (readers.MessagesPage, error) {
	ret := _m.Called(chanID, pm)

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 readers.MessagesPage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, readers.PageMetadata) (readers.MessagesPage, error)); ok {
		return rf(chanID, pm)
	}
	if rf, ok := ret.Get(0).(func(string, readers.PageMetadata) readers.MessagesPage); ok {
		r0 = rf(chanID, pm)
	} else {
		r0 = ret.Get(0).(readers.MessagesPage)
	}

	if rf, ok := ret.Get(1).(func(string, readers.PageMetadata) error); ok {
		r1 = rf(chanID, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
